{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) cipher(int decrypt?, cell text, int shift) {
  if (decrypt?) {
    shift = 26 - shift;
  }
  slice msg = text.begin_parse();
  msg~skip_bits(32);

  builder ans = begin_cell();

  ans~store_uint(0, 32);

  while (~ msg.slice_empty?()) {
    if (msg.slice_data_empty?()) {
      msg = msg~load_ref().begin_parse();
    }
    int char = msg~load_uint(8);
    int upper_case? = (64 < char) & (char < 91);
    int lower_case? = (96 < char) & (char < 123);
    if (upper_case?) {
      ans~store_uint(((char + shift - 65) % 26) + 65, 8);
    } if (lower_case?) {
      ans~store_uint(((char + shift - 97) % 26) + 97, 8);
    } if (~ upper_case? & ~ lower_case?){
      ans~store_uint(char, 8);  
    }
  }

  return ans.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return cipher(0, text, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return cipher(-1, text, shift); 
}

