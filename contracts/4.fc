{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
forall X -> int is_null? (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}


(cell) join_cells(tuple cells, cell prev_cell){
  while (~ is_null?(cells)) {
    builder a = cells~pop_back();
    a = a.store_ref(prev_cell);
    return join_cells(cells, a.end_cell());
  }
  return prev_cell;
}

(tuple) pack_cells(slice msg, int shift, builder ans) {
  tuple cells = null();
  while (~ msg.slice_empty?()) {
    if (msg.slice_data_empty?()) {
      msg = msg~load_ref().begin_parse();
    }
    int char = msg~load_uint(8);
    int upper_case? = (64 < char) & (char < 91);
    int lower_case? = (96 < char) & (char < 123);
    if (upper_case?) {
      char = ((char + (shift) - 65) % 26) + 65;
    } if (lower_case?) {
      char = ((char + (shift) - 97) % 26) + 97;
    }
    if (~ (ans.builder_bits() + 8 > 1023)) {
      ans~store_uint(char, 8);
    } else {
      cells~push_back(ans);
      ans = begin_cell();
      ans~store_uint(char, 8);
    }
  }
  if (~ ans.end_cell().begin_parse().slice_empty?()) {
    cells~push_back(ans);
  }
  return cells;
}

(cell) cipher(int decrypt?, cell text, int shift) {
  if (shift == 0) {
    return text;
  }
  if (decrypt?) {
    shift = 26 - shift;
  }
  slice msg = text.begin_parse();
  msg~skip_bits(32);

  builder ans = begin_cell();
  ans~store_uint(0, 32);

  tuple cells = pack_cells(msg, shift, ans);
  cell last_cell = cells~pop_back().end_cell();
  return join_cells(cells, last_cell);
}

  ;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return cipher(0, text, shift);
  }

  ;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return cipher(-1, text, shift); 
  }

